/*
 * RemoraConfig.h
 *
 *  Created on: Sep 13, 2023
 *      Author: Geramy
 */
#pragma once
#ifndef REMORA_REMORACONFIG_H_
#define REMORA_REMORACONFIG_H_

#include <string>
#include "configuration.h"
#include "crc32.h"

//Json Libraries
#include "lib/ArduinoJson6/ArduinoJson.h"

//Threads and DMA Libraries
#include "thread/pruThread.h"



#include "fsl_gpio.h"
#include "fsl_iomuxc.h"
#include "fsl_pit.h"
#include "flexspi_nor_flash.h"
#include "fsl_dmamux.h"
#include "fsl_edma.h"
#include "fsl_debug_console.h"

#include "modules/module.h"
#include "remora/RemoraStepGenDMA.h"
#include "modules/blink/blink.h"
//#include "modules/debug/debug.h"
#include "modules/DMAstepgen/DMAstepgen.h"
#include "modules/encoder/encoder.h"
#include "modules/comms/RemoraComms.h"
#include "modules/pwm/spindlePWM.h"
#include "modules/stepgen/stepgen.h"
#include "modules/digitalPin/digitalPin.h"
#include "modules/nvmpg/nvmpg.h"

class RemoraConfig {
private:
	// JSON config file stuff
	// 512 bytes of metadata in front of actual JSON file
	typedef struct
	{
	  uint32_t crc32;   		// crc32 of JSON
	  uint32_t length;			// length in words for CRC calculation
	  uint32_t jsonLength;  	// length in of JSON config in bytes
	  uint8_t padding[500];
	} metadata_t;
	#define METADATA_LEN    512

	uint32_t base_freq = PRU_BASEFREQ;
	uint32_t servo_freq = PRU_SERVOFREQ;

	bool configError;

	uint32_t crc32;
	FILE *jsonFile;
	string strJson;

	JsonObject thread;
	DynamicJsonDocument *doc;
	const char *defaultConfig = new const char[1022] {0x7B, 0x0A, 0x09, 0x22, 0x42, 0x6F, 0x61, 0x72, 0x64, 0x22, 0x3A, 0x20, 0x22, 0x4E, 0x4F, 0x56, 0x55, 0x53, 0x55, 0x4E, 0x22, 0x2C, 0x0A, 0x09, 0x22, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x73, 0x22, 0x3A, 0x5B, 0x0A, 0x09, 0x7B, 0x0A, 0x09, 0x22, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x3A, 0x20, 0x22, 0x42, 0x61, 0x73, 0x65, 0x22, 0x2C, 0x0A, 0x09, 0x22, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3A, 0x20, 0x22, 0x53, 0x74, 0x65, 0x70, 0x67, 0x65, 0x6E, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x43, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x22, 0x58, 0x20, 0x2D, 0x20, 0x4A, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x30, 0x20, 0x73, 0x74, 0x65, 0x70, 0x20, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x4A, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x4E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x22, 0x3A, 0x09, 0x09, 0x30, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x53, 0x74, 0x65, 0x70, 0x20, 0x50, 0x69, 0x6E, 0x22, 0x3A, 0x20, 0x09, 0x09, 0x22, 0x50, 0x31, 0x5F, 0x32, 0x32, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x50, 0x69, 0x6E, 0x22, 0x3A, 0x20, 0x09, 0x22, 0x50, 0x31, 0x5F, 0x31, 0x37, 0x22, 0x0A, 0x09, 0x7D, 0x2C, 0x0A, 0x09, 0x7B, 0x0A, 0x09, 0x22, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x3A, 0x20, 0x22, 0x42, 0x61, 0x73, 0x65, 0x22, 0x2C, 0x0A, 0x09, 0x22, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3A, 0x20, 0x22, 0x53, 0x74, 0x65, 0x70, 0x67, 0x65, 0x6E, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x43, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x22, 0x59, 0x20, 0x2D, 0x20, 0x4A, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x31, 0x20, 0x73, 0x74, 0x65, 0x70, 0x20, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x4A, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x4E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x22, 0x3A, 0x09, 0x09, 0x31, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x53, 0x74, 0x65, 0x70, 0x20, 0x50, 0x69, 0x6E, 0x22, 0x3A, 0x20, 0x09, 0x09, 0x22, 0x50, 0x31, 0x5F, 0x32, 0x34, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x50, 0x69, 0x6E, 0x22, 0x3A, 0x20, 0x09, 0x22, 0x50, 0x31, 0x5F, 0x33, 0x31, 0x22, 0x0A, 0x09, 0x7D, 0x2C, 0x0A, 0x09, 0x7B, 0x0A, 0x09, 0x22, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x3A, 0x20, 0x22, 0x42, 0x61, 0x73, 0x65, 0x22, 0x2C, 0x0A, 0x09, 0x22, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3A, 0x20, 0x22, 0x53, 0x74, 0x65, 0x70, 0x67, 0x65, 0x6E, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x43, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x22, 0x5A, 0x20, 0x2D, 0x20, 0x4A, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x32, 0x20, 0x73, 0x74, 0x65, 0x70, 0x20, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x4A, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x4E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x22, 0x3A, 0x09, 0x09, 0x32, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x53, 0x74, 0x65, 0x70, 0x20, 0x50, 0x69, 0x6E, 0x22, 0x3A, 0x20, 0x09, 0x09, 0x22, 0x50, 0x31, 0x5F, 0x31, 0x38, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x50, 0x69, 0x6E, 0x22, 0x3A, 0x20, 0x09, 0x22, 0x50, 0x31, 0x5F, 0x32, 0x35, 0x22, 0x0A, 0x09, 0x7D, 0x2C, 0x0A, 0x09, 0x7B, 0x0A, 0x09, 0x22, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x3A, 0x20, 0x22, 0x53, 0x65, 0x72, 0x76, 0x6F, 0x22, 0x2C, 0x0A, 0x09, 0x22, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3A, 0x20, 0x22, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x69, 0x6E, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x43, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x22, 0x58, 0x5F, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x50, 0x69, 0x6E, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x09, 0x22, 0x50, 0x34, 0x5F, 0x32, 0x36, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x4D, 0x6F, 0x64, 0x65, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x09, 0x22, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x44, 0x61, 0x74, 0x61, 0x20, 0x42, 0x69, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x30, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x49, 0x6E, 0x76, 0x65, 0x72, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x22, 0x46, 0x61, 0x6C, 0x73, 0x65, 0x22, 0x0A, 0x09, 0x7D, 0x09, 0x2C, 0x0A, 0x09, 0x7B, 0x0A, 0x09, 0x22, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x3A, 0x20, 0x22, 0x53, 0x65, 0x72, 0x76, 0x6F, 0x22, 0x2C, 0x0A, 0x09, 0x22, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3A, 0x20, 0x22, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x69, 0x6E, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x43, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x22, 0x59, 0x5F, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x50, 0x69, 0x6E, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x09, 0x22, 0x50, 0x34, 0x5F, 0x32, 0x37, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x4D, 0x6F, 0x64, 0x65, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x09, 0x22, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x44, 0x61, 0x74, 0x61, 0x20, 0x42, 0x69, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x31, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x49, 0x6E, 0x76, 0x65, 0x72, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x22, 0x46, 0x61, 0x6C, 0x73, 0x65, 0x22, 0x0A, 0x09, 0x7D, 0x2C, 0x0A, 0x09, 0x7B, 0x0A, 0x09, 0x22, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x3A, 0x20, 0x22, 0x53, 0x65, 0x72, 0x76, 0x6F, 0x22, 0x2C, 0x0A, 0x09, 0x22, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3A, 0x20, 0x22, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x69, 0x6E, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x43, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x22, 0x5A, 0x5F, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x50, 0x69, 0x6E, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x09, 0x22, 0x50, 0x34, 0x5F, 0x32, 0x31, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x4D, 0x6F, 0x64, 0x65, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x09, 0x22, 0x49, 0x6E, 0x70, 0x75, 0x74, 0x22, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x44, 0x61, 0x74, 0x61, 0x20, 0x42, 0x69, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x32, 0x2C, 0x0A, 0x09, 0x09, 0x22, 0x49, 0x6E, 0x76, 0x65, 0x72, 0x74, 0x22, 0x3A, 0x09, 0x09, 0x09, 0x22, 0x46, 0x61, 0x6C, 0x73, 0x65, 0x22, 0x0A, 0x09, 0x7D, 0x0A, 0x09, 0x5D, 0x0A, 0x7D, 0x0A};
	//JsonObject local_module = &module;
	/* End of Remora Original Data */
public:
	bool newJson;

public:
	RemoraConfig();
	int8_t checkJson();
	void moveJson();
	void jsonFromFlash();
	void deserialiseJSON();
	void configThreads();
	void loadModules(pruThread*, pruThread*, RemoraStepGenDMA*);
	virtual ~RemoraConfig();
};

#endif /* REMORA_REMORACONFIG_H_ */
